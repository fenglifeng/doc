超全局变量 — 超全局变量是在全部作用域中始终可用的内置变量
PHP 中的许多预定义变量都是“超全局的”，这意味着它们在一个脚本的全部作用域中都可用。在函数或方法中无需执行 global $variable; 就可以访问它们。

		这些超全局变量是：

		$GLOBALS:一个包含了全部变量的全局组合数组。变量的名字就是数组的键。
		$_SERVER:一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。
				'PHP_SELF':当前运行的脚本名
				'SERVER_ADDR':当前运行脚本所在的服务器的 IP 地址。
				'SERVER_NAME':当前运行的服务器名
				'REQUEST_TIME'：开始请求的时间戳
				'DOCUMENT_ROOT'：当前运行脚本的文档根目录
				'HTTP_ACCEPT_CHARSET'：当前请求头中 Accept-Charset: 项的内容，如果存在的话。例如：“iso-8859-1,*,utf-8”。
				'REMOTE_ADDR'：浏览当前页面的用户的 IP 地址
				'REMOTE_USER'：经验证的用户
				'SERVER_PORT'：Web 服务器使用的端口。默认值为 “80”。
				'SCRIPT_NAME'：当前脚本的路径
				'HTTP_USER_AGENT'：当前请求头中 User-Agent: 项的内容，如果存在的话。该字符串表明了访问该页面的用户代理的信息。
								一个典型的例子是：Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)。除此之外，你可以通过 get_browser() 来使用该值，从而定制页面输出以便适应用户代理的性能。
		$_GET：通过 URL 参数传递给当前脚本的变量的数组。
		$_POST：通过 HTTP POST 方法传递给当前脚本的变量的数组。
		$_FILES：通过 HTTP POST 方式上传到当前脚本的项目的数组。
		$_COOKIE：通过 HTTP Cookies 方式传递给当前脚本的变量的数组。setcookie() - Send a cookie
		$_SESSION：当前脚本可用 SESSION 变量的数组。session_start() 这个函数开启此全局变量
		$_REQUEST：默认情况下包含了 $_GET，$_POST 和 $_COOKIE 的数组。
		$_ENV：通过环境方式传递给当前脚本的变量的数组。


PHP 支持 8 种原始数据类型。

四种标量类型：
boolean（布尔型）：使用关键字 TRUE 或 FALSE。两个都不区分大小写。
integer（整型）：要明确地将一个值转换为 integer，用 (int) 或 (integer) 强制转换。不过大多数情况下都不需要强制转换，因为当运算符，函数或流程控制需要一个 integer 
					参数时，值会自动转换。还可以通过函数 intval() 来将一个值转换成整型。
float（浮点型，也称作 double)，精度问题，不要比较两个浮点数（下面例子为浮点数比较）
			<?php
				$a = 1.23456789;
				$b = 1.23456780;
				$epsilon = 0.00001;

				if(abs($a-$b) < $epsilon) {
				    echo "true";
				}
			?>
string（字符串）：支持Heredoc、Nowdoc （可以避免使用过多的引号）

两种复合类型：
array（数组）：PHP 中的数组实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。
				如果一个 object 类型转换为 array，则结果为一个数组，其单元为该对象的属性。键名将为成员变量名，不过有几点例外：整数属性不可访问；
				私有变量前会加上类名作前缀；保护变量前会加上一个 '*' 做前缀。这些前缀的前后都各有一个 NULL 字符。这会导致一些不可预知的行为
object（对象）：要创建一个新的对象 object，使用 new 语句实例化一个类。就是特么的对象！

最后是两种特殊类型：
resource（资源）：是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。如图片，压缩包and so on。
				 http://www.php.net/manual/zh/resource.php
NULL（无类型）

一些伪类型：
mixed（混合类型）：说明一个参数可以接受多种不同的（但不一定是所有的）类型
number（数字类型）：一个参数可以是 integer 或者 float。
callback（回调类型）：

变量：
PHP 的全局变量和 C 语言有一点点不同，在 C 语言中，全局变量在函数中自动生效，除非被局部变量覆盖。
这可能引起一些问题，有些人可能不小心就改变了一个全局变量。PHP 中全局变量在函数中使用时必须声明为 global。

常量：
// 合法的常量名
define("FOO",     "something");
使用关键字 const 定义常量


require 和 include 几乎完全一样，除了处理失败的方式不同之外。 
require 在出错时产生 E_COMPILE_ERROR 级别的错误。换句话说将导致脚本中止而 include 只产生警告（E_WARNING），脚本会继续运行。
当一个文件被包含时，其中所包含的代码继承了 include 所在行的变量范围。
从该处开始，调用文件在该行处可用的任何变量在被调用的文件中也都可用。不过所有在包含文件中定义的函数和类都具有全局作用域。
对于重复包含，推荐使用 include_once 而不是检查文件是否已包含并在包含文件中有条件返回。

对象：
在类的成员方法里面，可以用 ->（对象运算符）：$this->property（其中 property 是该属性名）这种方式来访问非静态属性。
静态属性则是用 ::（双冒号）：self::$property 来访问。更多静态属性与非静态属性的区别参见 Static 关键字。
如果直接使用 var 声明属性，而没有用 public，protected 或 private 之一，PHP 5 会将其视为 public。
可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。
	<?php
		class MyClass
		{
		    const constant = 'constant value';

		    function showConstant() {
		        echo  self::constant . "\n";
		    }
		}

		echo MyClass::constant . "\n";

		$classname = "MyClass";
		echo $classname::constant . "\n"; // 自 5.3.0 起

		$class = new MyClass();
		$class->showConstant();

		echo $class::constant."\n"; // 自 PHP 5.3.0 起
	?>
	
继承：class bar extends foo
如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。

对象复制可以通过 clone 关键字来完成（如果可能，这将调用对象的 __clone() 方法）。对象中的 __clone() 方法不能被直接调用。
$copy_of_object = clone $object;

namespace命名空间的作用，将代码参数按需要分隔


php引用
当任何关联到某个变量容器的变量离开它的作用域(比如：函数执行结束)，或者对变量调用了函数 unset()时，”refcount“就会减1，


编码转换用：iconv
文件操作：Filesystem 函数
数组有专门的函数库
字符串亦有专门的函数库
